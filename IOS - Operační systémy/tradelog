#!/bin/sh

export POSIXLY_CORRECT=yes
export LC_NUMERIC=en_US_UTF-8
display_help() {
    echo "Použiti: tradelog [-h|--help] [FILTR] [PŘÍKAZ] [LOG [LOG2 [...]]"
    echo
    echo "Příkazy:"
    echo "list-tick – výpis seznamu vyskytujících se burzovních symbolů, tzv. “tickerů”."
    echo "profit – výpis celkového zisku z uzavřených pozic."
    echo "pos – výpis hodnot aktuálně držených pozic seřazených sestupně dle hodnoty."
    echo "last-price – výpis poslední známé ceny pro každý ticker."
    echo "hist-ord – výpis histogramu počtu transakcí dle tickeru."
    echo "graph-pos – výpis grafu hodnot držených pozic dle tickeru."
    echo
    echo "Filtr:"
    echo "-a DATETIME – after: jsou uvažovány pouze záznamy PO tomto datu (bez tohoto data). DATETIME je formátu YYYY-MM-DD HH:MM:SS."
    echo "-b DATETIME – before: jsou uvažovány pouze záznamy PŘED tímto datem (bez tohoto data)."
    echo "-t TICKER – jsou uvažovány pouze záznamy odpovídající danému tickeru. Při více výskytech přepínače se bere množina všech uvedených tickerů."
    echo "-w WIDTH – u výpisu grafů nastavuje jejich šířku, tedy délku nejdelšího řádku na WIDTH. Tedy, WIDTH musí být kladné celé číslo. Více výskytů přepínače je chybné spuštění."
    echo
    echo "-h a --help vypíšou nápovědu s krátkým popisem každého příkazu a přepínače."

    exit 1
}
#variables
READ_INPUT=""
cmd=""
DATETIME_AFTER=""
DATETIME_BEFORE=""
TICKER=""
WIDTH=""
LOG_FILE=""
GZ_LOG_FILE=""
TICK_ARR=""
delim=";"
#reading line
while [ "$#" -gt 0 ]; do
  #reading cmds
  case "$1" in
  list-tick|profit|pos|last-price|hist-ord|graph-pos)
  cmd="$1"
  shift
  ;;
#reading filters
-a)
  DATETIME_AFTER="$2"
  shift
  shift
  ;;
-b)
  DATETIME_BEFORE="$2"
  shift
  shift
  ;;
-t)
  TICKER="$TICKER$2$delim"
  shift
  shift
  ;;
-w)
  WIDTH="$2"
  shift
  shift
  ;;
-h|--help)
display_help
exit 0
;;
#reading log files
*.log)
      LOG_FILE="$1 $LOG_FILE"
shift
;;
*.log.gz)
  GZ_LOG_FILE="$1 $GZ_LOG_FILE"
  shift
;;
cat)
  READ_INPUT=$(cat)
  ;;
esac
done
#log into var
if [ "$GZ_LOG_FILE" = "" ] && [ "$LOG_FILE" != "" ]; then
    READ_INPUT=$(cat $LOG_FILE)
    elif [ "$GZ_LOG_FILE" != "" ]; then
      READ_INPUT=$(gzip -d -c  $GZ_LOG_FILE | cat $LOG_FILE -)
      elif [ "$GZ_LOG_FILE" = "" ] && [ "$LOG_FILE" = "" ]; then
        READ_INPUT=$(cat)
fi

LOG_FOR_FILTER="$READ_INPUT"
LOG_FOR_FILTER=$(echo "$LOG_FOR_FILTER" | sort -n -k1,1)
#filters
if [ "$DATETIME_AFTER" != "" ]; then
    LOG_FOR_FILTER=$(echo "$LOG_FOR_FILTER" | awk -F';' -v DATETIME_AFTER="$DATETIME_AFTER" '
    {if ($1 > DATETIME_AFTER)
        print
    }')
fi

if [ "$DATETIME_BEFORE" != "" ]; then
    LOG_FOR_FILTER=$(echo "$LOG_FOR_FILTER" | awk -F';' -v DATETIME_BEFORE="$DATETIME_BEFORE" '
    { if ($1 < DATETIME_BEFORE)
        print

    }')
fi

if [ "$TICKER" != "" ]; then
    LOG_FOR_FILTER=$(echo "$LOG_FOR_FILTER" | awk -F';' -v TICKER="$TICKER" 'BEGIN{n = split(TICKER, TICK_ARR,";")}
    {for(i = 1; i <=n; i++)
        if($2 == TICK_ARR[i])
          print
    }'| sort )
fi

if [ "$WIDTH" = "" ]; then
    if [ "$cmd" = "hist-ord" ]; then
      WIDTH=0
      elif [ "$cmd" = "graph-pos"  ]; then
          WIDTH=1000
    fi
fi
#commands
if [ "$cmd" = "list-tick" ]; then
    LOG_FOR_FILTER=$(echo "$LOG_FOR_FILTER" | awk -F';' ' !visited[$2]++ {print $2}' | sort)
fi

if [ "$cmd" = "profit" ]; then
   LOG_FOR_FILTER=$(echo "$LOG_FOR_FILTER" | awk -F';'  '
   {  if ($3 == "sell") {
        SELL+= $4*$6
      }
      else{
        BUY += $4*$6
      }
   }
   END {printf("%.2f",SELL-BUY)}')
fi

if [ "$cmd" = "pos" ]; then
    TICK_ARR=$(echo "$LOG_FOR_FILTER" | awk -F';' ' !visited[$2]++ {print $2}' | sort)
    TICK_ARR=$(echo "$TICK_ARR" | awk '{TICK_ARR = TICK_ARR$1";"} END {printf("%s",TICK_ARR)}')
    LOG_FOR_FILTER=$(echo "$LOG_FOR_FILTER" | awk -F';' -v TICK_ARR="$TICK_ARR" 'BEGIN{n = split(TICK_ARR, TICK_ARR_FINAL,";")}

    {for(i = 1; i<n; i++) {
      if($2 == TICK_ARR_FINAL[i]) {
          if($3 == "sell") {
          SELL[i] += $6
          } else {
          BUY[i] += $6
          }
        LAST_PRICE[i] = $4;
      }
      MAX_LENGTH=0;
      }
      }
      END {
      		for(j = 1; j<n; j++) {
        SUM[j] = (BUY[j] - SELL[j]) * LAST_PRICE[j];
	      tmp=sprintf("%.2f",SUM[j]);
        if(length(tmp) >= MAX_LENGTH) {
        	MAX_LENGTH = length(tmp)
        }

      }


      	for(k = 1; k<n; k++) {
        {printf("%-10s: %*.2f\n",TICK_ARR_FINAL[k],MAX_LENGTH,SUM[k])}
      }   }


    '|sort -r -n -t ':' -k2)

fi

if [ "$cmd" = "last-price" ]; then
     TICK_ARR=$(echo "$LOG_FOR_FILTER" | awk -F';' ' !visited[$2]++ {print $2}' | sort)
    TICK_ARR=$(echo "$TICK_ARR" | awk '{TICK_ARR = TICK_ARR$1";"} END {printf("%s",TICK_ARR)}')
    LOG_FOR_FILTER=$(echo "$LOG_FOR_FILTER" | awk -F';' -v TICK_ARR="$TICK_ARR" 'BEGIN{n = split(TICK_ARR, TICK_ARR_FINAL,";")}

    {for(i = 1; i<n; i++) {
      if($2 == TICK_ARR_FINAL[i]) {
        LAST_PRICE[i] = $4;
      }
      MAX_LENGTH=0;

      }
      }
      END {

      for(j = 1; j<n; j++) {
	tmp=sprintf("%.2f",LAST_PRICE[j]);
        if(length(tmp) >= MAX_LENGTH) {
        	MAX_LENGTH = length(tmp)
        }

      }
      for(k = 1; k<n; k++) {
        {printf("%-10s: %*.2f\n",TICK_ARR_FINAL[k],MAX_LENGTH,LAST_PRICE[k])}
      }   }


    '|sort)
fi

if [ "$cmd" = "hist-ord" ]; then
	TICK_ARR=$(echo "$LOG_FOR_FILTER" | awk -F';' ' !visited[$2]++ {print $2}' | sort)
    	TICK_ARR=$(echo "$TICK_ARR" | awk '{TICK_ARR = TICK_ARR$1";"} END {printf("%s",TICK_ARR)}')
     	LOG_FOR_FILTER=$(echo "$LOG_FOR_FILTER" | awk -F';' -v TICK_ARR="$TICK_ARR" -v WIDTH="$WIDTH" 'BEGIN{n = split(TICK_ARR, TICK_ARR_FINAL,";")}
     	{ for (i=1; i<n; i++) {
     			if (TICK_ARR_FINAL[i] == $2) {
     			  VAL_ARR[i] +=1
     			}
     		}
     	}
     	END{


     		for (j=1; j<n; j++) {
     		  if(VAL_ARR[j] > MAX_VAL) {
     		  MAX_VAL = VAL_ARR[j]
     		  }
     		}
     		if(WIDTH == 0) {
     		  WIDTH = MAX_VAL;
     		}
     		for (k=1; k<n; k++) {
     		  printf("%-10s: ",TICK_ARR_FINAL[k])
     		  NUM_OF_LOOPS = int((VAL_ARR[k]*WIDTH)/MAX_VAL);

     		  for (NUM_OF_LOOPS; NUM_OF_LOOPS !=0; NUM_OF_LOOPS--) {
     		  printf("#")
     		  }
     		  printf("\n")
     		}
     	}

     	')

fi

if [ "$cmd" = "graph-pos" ]; then
    TICK_ARR=$(echo "$LOG_FOR_FILTER" | awk -F';' ' !visited[$2]++ {print $2}' | sort)
    	TICK_ARR=$(echo "$TICK_ARR" | awk '{TICK_ARR = TICK_ARR$1";"} END {printf("%s",TICK_ARR)}')
     	LOG_FOR_FILTER=$(echo "$LOG_FOR_FILTER" | awk -F';' -v TICK_ARR="$TICK_ARR" -v WIDTH="$WIDTH" 'BEGIN{n = split(TICK_ARR, TICK_ARR_FINAL,";")}
      {MAX = 0;
      for(i = 1; i<n; i++) {
        if($2 == TICK_ARR_FINAL[i]) {
          if($3 == "buy") {
            SUM[i] += $6;
          } else {
            SUM[i] -= $6;
          }
        LAST_PRICE[i] = $4;
        }
      }
      }

      END{
      
      for(j = 1; j<n; j++) {
        ABS_ARR[j] = SUM[j] * LAST_PRICE[j];
          if (ABS_ARR[j]<0) {
          ABS_ARR[j] = ((SUM[j] * LAST_PRICE[j]) * (-1.0f));
          }
      }
      
      for(j in ABS_ARR) {
          if (ABS_ARR[j] > MAX) {
          MAX = ABS_ARR[j]
          }
      }
        for(k in ABS_ARR) {
          printf("%-10s:",TICK_ARR_FINAL[k])
          if((SUM[k] * LAST_PRICE[k]) <0) {
            if(ABS_ARR[k] == MAX) {
              NUM_OF_LOOPS = WIDTH;
              printf(" ")
            }else {
              NUM_OF_LOOPS = int((ABS_ARR[k]/(MAX/WIDTH)));
              if (NUM_OF_LOOPS != 0) {
              printf(" ")
              }
            }
            while (NUM_OF_LOOPS !=0) {
     		  printf("!")
     		  NUM_OF_LOOPS--;
     		}
            }else if((SUM[k] * LAST_PRICE[k]) >0) {
            if(ABS_ARR[k] == MAX) {
              NUM_OF_LOOPS = WIDTH;
              printf(" ")
            }else {
              NUM_OF_LOOPS = int((ABS_ARR[k]/(MAX/WIDTH)));
              if (NUM_OF_LOOPS != 0) {
              printf(" ")
              }
            }
            while (NUM_OF_LOOPS !=0) {
     		  printf("#")
     		  NUM_OF_LOOPS--;
     		}
            }
            printf("\n")
          }
        }
      

     	')
fi
echo "$LOG_FOR_FILTER"

